<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.llbrt.cryptofssrv</groupId>
	<artifactId>cryfsmount</artifactId>
	<version>2.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<scm>
		<connection>scm:git:git@github.com:llbrt/cryfsmount.git</connection>
		<developerConnection>scm:git:git@github.com:llbrt/cryfsmount.git</developerConnection>
		<url>https://github.com/llbrt/cryfsmount</url>
	</scm>

	<licenses>
		<license>
			<name>GNU Affero General Public License (AGPL) version 3.0</name>
			<url>https://www.gnu.org/licenses/agpl.txt</url>
			<distribution>manual</distribution>
		</license>
	</licenses>

	<properties>
		<java.version>17</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>

		<cmd.mount>cryfsmount</cmd.mount>
		<cmd.umount>cryfsumount</cmd.umount>

		<!-- Dependencies -->
		<cryptomator-fuse.version>1.3.3</cryptomator-fuse.version>
		<cryptomator-fs.version>2.3.1</cryptomator-fs.version>
		<picocli.version>4.6.2</picocli.version>
		<logback.version>1.2.10</logback.version>
		<junit.version>5.8.2</junit.version>
	</properties>

	<dependencies>
		<!-- Cryptomator -->
		<dependency>
			<groupId>org.cryptomator</groupId>
			<artifactId>fuse-nio-adapter</artifactId>
			<version>${cryptomator-fuse.version}</version>
		</dependency>
		<dependency>
			<groupId>org.cryptomator</groupId>
			<artifactId>cryptofs</artifactId>
			<version>${cryptomator-fs.version}</version>
		</dependency>

		<!-- Logs -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>

		<!-- CLI -->
		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
			<version>${picocli.version}</version>
		</dependency>

		<!-- Tests -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<targetPath>${project.build.outputDirectory}</targetPath>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/packaging/skel</directory>
				<targetPath>${project.build.directory}/packaging/opt/${cmd.mount}</targetPath>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/packaging/deb</directory>
				<targetPath>${project.build.directory}/packaging/</targetPath>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<release>${java.version}</release>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<escapeString>\</escapeString>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<shadedArtifactAttached>false</shadedArtifactAttached>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.github.llbrt.cryptofs.CryFsMount</mainClass>
								</transformer>
							</transformers>
							<outputFile>${project.build.directory}/packaging/opt/${cmd.mount}/app/${cmd.mount}.jar</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<configuration>
					<target>
						<move file="${project.build.directory}/packaging/opt/${cmd.mount}/bin/mount.sh" tofile="${project.build.directory}/packaging/opt/${cmd.mount}/bin/${cmd.mount}" />
						<move file="${project.build.directory}/packaging/opt/${cmd.mount}/bin/umount.sh" tofile="${project.build.directory}/packaging/opt/${cmd.mount}/bin/${cmd.umount}" />
					</target>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>run</goal>
						</goals>
						<phase>package</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>package-jre</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<!-- Creates the jre directory -->
							<executable>jlink</executable>
							<arguments>
								<argument>--no-header-files</argument>
								<argument>--no-man-pages</argument>
								<argument>--compress=2</argument>
								<argument>--strip-debug</argument>
								<argument>--add-modules</argument>
								<!-- Check the list of modules, especially when modifying dependencies -->
								<!-- jdk.jcmd is necessary to get the command jps -->
								<argument>java.base,java.compiler,java.logging,java.management,java.naming,java.sql,java.xml,jdk.unsupported,jdk.jcmd</argument>
								<argument>--output</argument>
								<argument>${project.build.directory}/packaging/opt/${cmd.mount}/jre</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>create-deb-package</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<!-- Create the Debian package -->
							<executable>dpkg-deb</executable>
							<arguments>
								<argument>--root-owner-group</argument>
								<argument>--build</argument>
								<argument>${project.build.directory}/packaging</argument>
								<argument>${project.build.directory}/${cmd.mount}_${project.version}_amd64.deb</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-java</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireJavaVersion>
									<version>${java.version}</version>
								</requireJavaVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>display-property-updates</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.0.0-M5</version>
				</plugin>
				<plugin>
					<artifactId>maven-shade-plugin</artifactId>
					<version>3.2.4</version>
				</plugin>
				<plugin>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.8.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>